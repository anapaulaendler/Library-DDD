// <auto-generated />
using System;
using Library.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBorrowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicationYear")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d2c69ea-31f0-4388-9c43-5c60f97cfd12"),
                            Author = "George Orwell",
                            Genre = "Dystopian",
                            IsBorrowed = false,
                            Isbn = "9780451524935",
                            PublicationYear = "1949",
                            Title = "1984"
                        },
                        new
                        {
                            Id = new Guid("90c4eeaa-345c-4c1d-96e3-16a65fb7cb54"),
                            Author = "Harper Lee",
                            Genre = "Fiction",
                            IsBorrowed = false,
                            Isbn = "9780061120084",
                            PublicationYear = "1960",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("7ac248f3-e8db-4d69-938e-faaa362a7134"),
                            Author = "F. Scott Fitzgerald",
                            Genre = "Classic",
                            IsBorrowed = false,
                            Isbn = "9780743273565",
                            PublicationYear = "1925",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = new Guid("0fd8f8a0-831c-46d3-86d0-57b9e5d3c2fb"),
                            Author = "Aldous Huxley",
                            Genre = "Science Fiction",
                            IsBorrowed = false,
                            Isbn = "9780060850524",
                            PublicationYear = "1932",
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = new Guid("e2f4a0b1-68da-4462-9a40-31e3fd6f0f45"),
                            Author = "J.D. Salinger",
                            Genre = "Fiction",
                            IsBorrowed = false,
                            Isbn = "9780316769488",
                            PublicationYear = "1951",
                            Title = "The Catcher in the Rye"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b71e805-fc38-4bb2-9988-847327b7b445"),
                            Email = "alice@example.com",
                            Name = "Alice",
                            Password = "123@abc",
                            Role = (byte)2
                        },
                        new
                        {
                            Id = new Guid("9ac2f2e0-2979-4ebe-9104-9fcb81db70fa"),
                            Email = "bob@example.com",
                            Name = "Bob",
                            Password = "123@abc",
                            Role = (byte)1
                        },
                        new
                        {
                            Id = new Guid("0f5c13a7-ba67-43ae-ae16-ac7407a86728"),
                            Email = "charlie@example.com",
                            Name = "Charlie",
                            Password = "123@abc",
                            Role = (byte)0
                        },
                        new
                        {
                            Id = new Guid("f1e06fd6-d5ac-4ed6-906a-447513114e77"),
                            Email = "diana@example.com",
                            Name = "Diana",
                            Password = "123@abc",
                            Role = (byte)2
                        },
                        new
                        {
                            Id = new Guid("4bc915b5-8a13-4d74-a848-388b6c976221"),
                            Email = "eve@example.com",
                            Name = "Eve",
                            Password = "123@abc",
                            Role = (byte)2
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Loan", b =>
                {
                    b.HasOne("Library.Domain.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
